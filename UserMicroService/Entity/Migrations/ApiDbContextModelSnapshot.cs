// <auto-generated />
using System;
using Entity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Entity.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    partial class ApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entity.Model.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address_type");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("line1");

                    b.Property<string>("Line2")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("line2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("zip_code");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("address");
                });

            modelBuilder.Entity("Entity.Model.CardPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("card_holder_name");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("card_number");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("ExpireDate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("expire_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<Guid>("PaymentTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_type_id");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTypeId")
                        .IsUnique();

                    b.ToTable("card_payment");
                });

            modelBuilder.Entity("Entity.Model.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_type");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("payment");
                });

            modelBuilder.Entity("Entity.Model.UpiPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<Guid>("PaymentTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_type_id");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.Property<string>("UpiApp")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("upi_app");

                    b.Property<string>("UpiId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("upi_id");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTypeId")
                        .IsUnique();

                    b.ToTable("upi_payment");
                });

            modelBuilder.Entity("Entity.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email_address");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e56fa35f-042b-4d88-a165-9b14083c2872"),
                            CreatedBy = new Guid("e56fa35f-042b-4d88-a165-9b14083c2872"),
                            CreatedOn = new DateTime(2023, 7, 12, 11, 44, 41, 841, DateTimeKind.Utc).AddTicks(3125),
                            EmailAddress = "Admin@User.com",
                            IsActive = true,
                            Password = "/3vZexp3id3Sd1Ei/WgX8xc2ctqfgCzuxX8oQyW/WJ8=",
                            PhoneNumber = "9087654321",
                            Role = "Admin",
                            UpdatedBy = new Guid("e56fa35f-042b-4d88-a165-9b14083c2872"),
                            UpdatedOn = new DateTime(2023, 7, 12, 11, 44, 41, 841, DateTimeKind.Utc).AddTicks(3127),
                            UserName = "AdminUser"
                        },
                        new
                        {
                            Id = new Guid("e71f575c-1c70-4f83-b8b0-8021a853b1ef"),
                            CreatedBy = new Guid("e56fa35f-042b-4d88-a165-9b14083c2872"),
                            CreatedOn = new DateTime(2023, 7, 12, 11, 44, 41, 841, DateTimeKind.Utc).AddTicks(3133),
                            EmailAddress = "Propel@User.com",
                            IsActive = true,
                            Password = "dM0p8PMqmscp69xac484T6OErIqk5WM4qDtV+MzVGdY=",
                            PhoneNumber = "9012345678",
                            Role = "Admin",
                            UpdatedBy = new Guid("e56fa35f-042b-4d88-a165-9b14083c2872"),
                            UpdatedOn = new DateTime(2023, 7, 12, 11, 44, 41, 841, DateTimeKind.Utc).AddTicks(3134),
                            UserName = "Propel"
                        });
                });

            modelBuilder.Entity("Entity.Model.Wishlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("wishlist");
                });

            modelBuilder.Entity("Entity.Model.Address", b =>
                {
                    b.HasOne("Entity.Model.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Model.CardPayment", b =>
                {
                    b.HasOne("Entity.Model.Payment", "Payment")
                        .WithOne("CardPayment")
                        .HasForeignKey("Entity.Model.CardPayment", "PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Entity.Model.Payment", b =>
                {
                    b.HasOne("Entity.Model.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Model.UpiPayment", b =>
                {
                    b.HasOne("Entity.Model.Payment", "Payment")
                        .WithOne("UpiPayment")
                        .HasForeignKey("Entity.Model.UpiPayment", "PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Entity.Model.Wishlist", b =>
                {
                    b.HasOne("Entity.Model.User", "User")
                        .WithMany("Wishlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Model.Payment", b =>
                {
                    b.Navigation("CardPayment");

                    b.Navigation("UpiPayment");
                });

            modelBuilder.Entity("Entity.Model.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Payments");

                    b.Navigation("Wishlists");
                });
#pragma warning restore 612, 618
        }
    }
}
